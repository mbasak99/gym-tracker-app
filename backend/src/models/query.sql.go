// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    dob,
    joined
) VALUES ($1, $2, $3) RETURNING id, name, dob, joined
`

type CreateUserParams struct {
	Name   interface{}
	Dob    pgtype.Date
	Joined pgtype.Date
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Dob, arg.Joined)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Joined,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, dob, joined FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Dob,
		&i.Joined,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, dob, joined FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dob,
			&i.Joined,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserDOB = `-- name: UpdateUserDOB :exec
UPDATE users
SET dob = $2
WHERE id = $1
`

type UpdateUserDOBParams struct {
	ID  int64
	Dob pgtype.Date
}

func (q *Queries) UpdateUserDOB(ctx context.Context, arg UpdateUserDOBParams) error {
	_, err := q.db.Exec(ctx, updateUserDOB, arg.ID, arg.Dob)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users
SET name = $2
WHERE id = $1
`

type UpdateUserNameParams struct {
	ID   int64
	Name interface{}
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.Exec(ctx, updateUserName, arg.ID, arg.Name)
	return err
}
